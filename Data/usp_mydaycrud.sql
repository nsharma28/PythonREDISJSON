-- FUNCTION: public.usp_mydaycrud(integer, integer, integer, uuid, numeric, date, json, json, json, json, json, character varying, integer, date, date, date, character varying, integer, integer)

-- DROP FUNCTION IF EXISTS public.usp_mydaycrud(integer, integer, integer, uuid, numeric, date, json, json, json, json, json, character varying, integer, date, date, date, character varying, integer, integer);

CREATE OR REPLACE FUNCTION public.usp_mydaycrud(
	p_mode integer DEFAULT 0,
	p_userid integer DEFAULT 0,
	p_mydayid integer DEFAULT NULL::integer,
	p_mydayuuid uuid DEFAULT NULL::uuid,
	p_totalamount numeric DEFAULT NULL::numeric(18,2),
	p_journeydate date DEFAULT NULL::date,
	p_json json DEFAULT NULL::json,
	p_json1 json DEFAULT NULL::json,
	p_json2 json DEFAULT NULL::json,
	p_json3 json DEFAULT NULL::json,
	p_json4 json DEFAULT NULL::json,
	p_gstno character varying DEFAULT NULL::character varying,
	p_expenseid integer DEFAULT NULL::integer,
	p_checkindate date DEFAULT NULL::date,
	p_checkoutdate date DEFAULT NULL::date,
	p_claimdate date DEFAULT NULL::date,
	p_sharingwith character varying DEFAULT NULL::character varying,
	p_cityid integer DEFAULT NULL::integer,
	p_validflag integer DEFAULT 0)
    RETURNS json
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
 declare v_Result character varying; declare v_ResultData json; declare v_ResultData1 json; declare v_mydayid integer; v_4wfuelprice numeric(18, 2); v_4wmaintenanceprice numeric(18, 2); v_2wfuelprice numeric(18, 2); v_2wmaintenanceprice numeric(18, 2); v_mtd numeric(18, 2); v_ytd numeric(18, 2); v_4wgeokm numeric(18, 2); v_2wgeokm numeric(18, 2); v_visiterid int; v_2wocdiff numeric(18, 2); v_4wocdiff numeric(18, 2); v_2wopenkm character varying; v_4wopenkm character varying; v_2wclosekm character varying; v_4wclosekm character varying; v_awithfriendrelative numeric(18, 2); v_bwithfriendrelative numeric(18, 2); v_subusertypeid integer; v_ndaamount numeric(18, 2); declare v_expenseid integer; v_accommodationexpenseid integer; declare v_startdate date; v_enddate date; v_isvalid boolean DEFAULT FALSE :: boolean; v_errormessage character varying DEFAULT '' :: character varying; v_type character varying; v_billsubmitexpenseid integer; v_claimamount numeric(18, 2); v_sharingwith character varying DEFAULT '' :: character varying; declare v_isreviewmeeting boolean DEFAULT false :: boolean; v_travelingmode character varying DEFAULT '' :: character varying; v_vehicletype character varying DEFAULT 'N/A' :: character varying; declare _visitortype character varying; declare _gstno character varying; declare _rec RECORD; declare _ruleid integer; declare _day integer; declare _month integer; declare _year integer; declare _today integer; declare _deadline integer; declare _deadlinedate character varying; declare _message character varying; declare errormessage character varying; declare iserror boolean; declare _mydayid character varying; declare _isallowadminclaimsubmission boolean; declare v_checkindate date DEFAULT NULL :: date; declare v_checkoutdate date DEFAULT NULL :: date; declare v_totalclaimlimit numeric(18, 2) DEFAULT 0 :: numeric(18, 2); declare _customervisit integer; _customer30minvisit integer; _farmervisit integer; _subusertype character varying; _demovisit integer; _followupvisit integer; _fielddayvisit integer; _farmermeetingvisit integer; _reviewmeetingvisit integer; _retailervisit integer; declare _othervisit integer; _meetingtime integer; _subusertypeid integer; declare _headquarter character varying; declare v_subregionlist character varying; v_zonlist character varying; declare v_statusid integer DEFAULT 0 :: integer; declare v_subregionid character varying DEFAULT NULL :: character varying; declare v_visitcount integer DEFAULT 0 :: integer; declare v_visitpercentage numeric DEFAULT 0 :: numeric; declare v_validationcheck boolean DEFAULT true :: boolean; declare _retailerminutevisit integer; declare v_daystarttime time without time zone DEFAULT '00:00:00' :: time without time zone; declare v_dayendtime time without time zone DEFAULT '00:00:00' :: time without time zone; declare v_firstcheckintime time without time zone DEFAULT '00:00:00' :: time without time zone; declare v_isvalidatefirstcheckin boolean DEFAULT false :: boolean; declare v_isvalidatestartday boolean DEFAULT false :: boolean; DECLARE v_validationmeetingtime integer; v_validationcustomer integer; v_validationretailer integer; v_validationifm integer; v_validationofm integer; v_validationreviewmeeting integer; v_validationdemo integer; v_validationfollowupday integer; v_validationfieldday integer; v_validationothers integer; v_validationtotal integer; v_validationretailermeetingtime integer; declare v_ischeckvehiclevalid boolean DEFAULT false :: boolean; declare v_customercount integer; v_retailercount integer; v_ifmcount integer; v_reviewmeetingcount integer; v_ofmcount integer; v_democount integer; v_followupcount integer; v_fielddaycount integer; v_othercount integer; v_stockcount integer; declare v_travelingmodejson json; BEGIN if(p_mode = 1) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select m.mydayid, t.type, t.name, mdtm.travelingmode as travelingby, to_char(starttime, 'dd-MM-yyyy') as startdate, to_char(starttime, 'HH12:MI AM') as starttime, to_char( checkintime, 'dd-MM-yyyy HH24:MI:SS' ) as checkintime from tblmyday as m left join tblmydaytravelingmode as mdtm on mdtm.mydayid = m.mydayid left join ( select 'Customer' as type, cm.customername as name, mdtm.travelingmode as travelingby, cv.mydayid, cv.checkintime as checkintime from tblcustomervisitplan as cvp inner join tblcustomervisit as cv on cv.customervisitplanid = cvp.customervisitplanid inner join tblcustomermaster as cm on cm.id = cvp.customerid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = cv.mydayid and mdtm.closingtime is null where cvp.visiterid = p_userid and ( cv.checkintime is not null and cv.checkouttime is null ) and cvp.visitdate >= now() :: date union select 'Retailer' as type, r.name as name, mdtm.travelingmode as travelingby, rv.mydayid, rv.checkintime as checkintime from tblretailervisitplan as rvp inner join tblretailervisit as rv on rv.retailervisitplanid = rvp.retailervisitplanid inner join tblretailer as r on r.retailerid = rvp.retailerid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = rv.mydayid and mdtm.closingtime is null where rvp.visiterid = p_userid and ( rv.checkintime is not null and rv.checkouttime is null ) and rvp.visitdate >= now() :: date union select 'Farmer' as type, f.name as name, mdtm.travelingmode as travelingby, fv.mydayid, fv.checkintime as checkintime from tblfarmervisitplan as fvp inner join tblfarmervisit as fv on fv.farmervisitplanid = fvp.farmervisitplanid inner join tblfarmer as f on f.farmerid = fvp.farmerid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = fv.mydayid and mdtm.closingtime is null where fvp.visiterid = p_userid and ( fv.checkintime is not null and fv.checkouttime is null ) and fvp.visitdate >= now() :: date union select 'Review Meeting' as type, rmvp.agenda as name, mdtm.travelingmode as travelingby, rv.mydayid, rv.checkintime as checkintime from tblreviewmeetingvisitplan as rmvp inner join tblreviewmeetingvisiter as rmv on rmv.reviewmeetingvisitplanid = rmvp.reviewmeetingvisitplanid inner join tbllreviewmeetingvisit as rv on rv.reviewmeetingvisiterid = rmv.reviewmeetingvisiterid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = rv.mydayid and mdtm.closingtime is null where rmv.visiterid = p_userid and ( rv.checkintime is not null and rv.checkouttime is null ) and rmvp.visitdate >= now() :: date union select 'OFM' as type, fmvp.agenda as name, mdtm.travelingmode as travelingby, fv.mydayid, fv.checkintime as checkintime from tblfarmermeetingvisitplan as fmvp inner join tblfarmermeetingvisiter as fmv on fmv.farmermeetingvisitplanid = fmvp.farmermeetingvisitplanid inner join tblfarmermeetingvisit as fv on fv.farmermeetingvisiterid = fmv.farmermeetingvisiterid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = fv.mydayid and mdtm.closingtime is null where fmv.visiterid = p_userid and ( fv.checkintime is not null and fv.checkouttime is null ) and fmvp.visitdate >= now() :: date union select 'Demo' as type, dmvp.demono as name, mdtm.travelingmode as travelingby, dv.mydayid, dv.checkintime as checkintime from tbldemovisitplan as dmvp inner join tbldemovisiter as dvi on dvi.demovisitplanid = dmvp.demovisitplanid inner join tbldemovisit as dv on dv.demovisiterid = dvi.demovisiterid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = dv.mydayid and mdtm.closingtime is null where dvi.inviteeid = p_userid and ( dv.checkintime is not null and dv.checkouttime is null ) and dmvp.visitdate >= now() :: date union select 'Follow Up' as type, dvp.demono as name, mdtm.travelingmode as travelingby, fv.mydayid, fv.checkintime as checkintime from tblfollowupvisitplan as fuvp inner join tbldemovisitplan as dvp on dvp.demovisitplanid = fuvp.demovisitplanid inner join tbldemovisiter as dvi on dvi.demovisitplanid = fuvp.demovisitplanid inner join tblfollowupvisit as fv on fv.demovisiterid = dvi.demovisiterid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = fv.mydayid and mdtm.closingtime is null where dvi.inviteeid = p_userid and ( fv.checkintime is not null and fv.checkouttime is null ) and fuvp.followupdate >= now() :: date union select 'Other' as type, lu.lookupvalue as name, mdtm.travelingmode as travelingby, ov.mydayid, ov.checkintime as checkintime from tblothervisitplan as ovp inner join tbluserlogin as ul on ul.userid = ovp.visiterid inner join tbllothervisit as ov on ov.othervisitplanid = ovp.othervisitplanid inner join tbllookupvalues as lu on lu.lookupvalueid = ovp.visittypeid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = ov.mydayid and mdtm.closingtime is null where ovp.visiterid = p_userid and ( ov.checkintime is not null and ov.checkouttime is null ) and ovp.visitdate >= now() :: date union select 'Field Day' as type, dvp.demono as name, mdtm.travelingmode as travelingby, fv.mydayid, fv.checkintime as checkintime from tblfielddayvisitplan as fdvp inner join tbldemovisitplan as dvp on dvp.demovisitplanid = fdvp.demovisitplanid inner join tbldemovisiter as dvi on dvi.demovisitplanid = fdvp.demovisitplanid inner join tblfielddayvisit as fv on fv.demovisiterid = dvi.demovisiterid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = fv.mydayid and mdtm.closingtime is null where dvi.inviteeid = p_userid and ( fv.checkintime is not null and fv.checkouttime is null ) and fdvp.fielddate >= now() :: date union select 'Stock' as type, COALESCE(c.customername, r.name) as name, mdtm.travelingmode as travelingby, sv.mydayid, sv.checkintime as checkintime from tblstockvisitplan as svp inner join tblstockvisit as sv on sv.stockvisitplanid = svp.stockvisitplanid left join tblcustomermaster as c on c.id = svp.customerid left join tblretailer as r on r.retailerid = svp.retailerid left join tblmydaytravelingmode as mdtm on mdtm.mydayid = sv.mydayid and mdtm.closingtime is null where svp.visiterid = p_userid and ( sv.checkintime is not null and sv.checkouttime is null ) and svp.visitdate >= now() :: date limit 1 ) as t on t.mydayid = m.mydayid where m.createdby = p_userid and m.starttime is not null and m.endtime is null order by mdtm.openingtime desc ) as kk; RETURN v_ResultData; elseif(p_mode = 2) THEN insert into tblmydaylocation( mydayid, lat, lng, capturetime, travelingmode, visitortype, travelinguid, visitplanid ) select md.mydayid, lat, lng, capturetime, travelingmode, visitortype, travelinguid, visitplanid from json_to_recordset(p_json) as td( mydayid uuid, lat double precision, lng double precision, capturetime timestamp with time zone, travelingmode character varying(10), visitortype character varying(20), travelinguid uuid, visitplanid integer ) left join tblmyday as md on md.uuid = td.mydayid; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select 1 as mydayid ) as kk; RETURN v_ResultData; elseif(p_mode = 3) THEN IF NOT EXISTS( select 1 from json_to_recordset(p_json) as td(starttime timestamp with time zone) inner join tblmyday as md on md.starttime :: date = td.starttime :: date and md.createdby = p_userid ) THEN insert into tblmyday( uuid, starttime, startlat, startlng, createdby, createddate, statusid, statuschangedby, statuschangeddate ) select td.uuid, td.starttime, td.startlat, td.startlng, p_userid, now(), 3, p_userid, now() from json_to_recordset(p_json) as td( uuid uuid, starttime timestamp with time zone, startlat double precision, startlng double precision ) left join tblmyday as md on md.uuid = td.uuid where md.mydayid is null and td.starttime is not null; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) select md.mydayid, 3, p_userid, now() from json_to_recordset(p_json) as td( uuid uuid, starttime timestamp with time zone, startlat double precision, startlng double precision ) inner join tblmyday as md on md.uuid = td.uuid where td.starttime is not null; END if; update tblmyday set endtime = td.endtime, endlat = td.endlat, endlng = td.endlng, statusid = 4, statuschangedby = p_userid, statuschangeddate = now() from json_to_recordset(p_json) as td( uuid uuid, endtime timestamp with time zone, endlat double precision, endlng double precision ) where tblmyday.uuid = td.uuid and td.endtime is not null; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) select md.mydayid, 4, p_userid, now() from json_to_recordset(p_json) as td( uuid uuid, endtime timestamp with time zone ) inner join tblmyday as md on md.uuid = td.uuid where md.mydayid is not null and td.endtime is not null; IF EXISTS( select 1 from tbluserlogin as ul inner join tbllookupvalues as ut on ut.lookupvalueid = ul.usertypeid where ul.userid = p_userid and ut.lookupvalue = 'SDO/MDO' ) THEN update tblmyday set statusid = CASE WHEN(td.validflag = '1') THEN 16 ELSE 12 END, statuschangedby = p_userid, statuschangeddate = now() from json_to_recordset(p_json) as td( uuid uuid, endtime timestamp with time zone, validflag character varying ) where tblmyday.uuid = td.uuid and td.endtime is not null; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) select md.mydayid, CASE WHEN(td.validflag = '1') THEN 16 ELSE 12 END, p_userid, now() from json_to_recordset(p_json) as td( uuid uuid, endtime timestamp with time zone, validflag character varying ) inner join tblmyday as md on md.uuid = td.uuid where md.mydayid is not null and td.endtime is not null; END IF; insert into tblmydaytravelingmode( mydayid, travelingmode, openingkm, openingtime, openinglat, openinglng, mydaytravelingmodeuuid, openingpicture ) select md.mydayid, td.travelingmode, CASE WHEN( COALESCE(td.openingkm, '') = '' ) THEN NULL :: numeric(18, 2) ELSE td.openingkm :: numeric(18, 2) END, td.openingtime, td.openinglat, td.openinglng, td.mydaytravelingmodeuuid, td.openingfilename from json_to_recordset(p_json1) as td( uuid uuid, travelingmode character varying(10), openingkm character varying, openingtime timestamp with time zone, openinglat double precision, openinglng double precision, mydaytravelingmodeuuid uuid, openingfilename character varying ) inner join tblmyday as md on md.uuid = td.uuid left join tblmydaytravelingmode as mdtm on mdtm.mydaytravelingmodeuuid = td.mydaytravelingmodeuuid where mdtm.mydaytravelingmodeid is null and td.travelingmode is not null and td.openingtime is not null; update tblmydaytravelingmode set closingkm = CASE WHEN( COALESCE(td.closingkm, '') = '' ) THEN NULL :: numeric(18, 2) ELSE td.closingkm :: numeric(18, 2) END, closingtime = td.closingtime, closinglat = td.closinglat, closinglng = td.closinglng, openingkm = COALESCE( td.openingkm, tblmydaytravelingmode.openingkm ), closingpicture = td.closingfilename from json_to_recordset(p_json1) as td( uuid uuid, mydaytravelingmodeuuid uuid, closingkm character varying, closingtime timestamp with time zone, closinglat double precision, closinglng double precision, openingkm numeric(18, 2), closingfilename character varying ) inner join tblmyday as md on md.uuid = td.uuid where tblmydaytravelingmode.mydaytravelingmodeuuid = td.mydaytravelingmodeuuid and td.closingtime is not null; if EXISTS( select 1 from json_to_recordset(p_json) as td(uuid uuid) where uuid is not null ) THEN select md.mydayid as mydayid into p_mydayid from json_to_recordset(p_json) as td(uuid uuid) inner join tblmyday as md on md.uuid = td.uuid where md.mydayid is not null; ELSE select md.mydayid as mydayid into p_mydayid from json_to_recordset(p_json1) as td(uuid uuid) inner join tblmyday as md on md.uuid = td.uuid where md.mydayid is not null; END IF; if(p_mydayid > 0) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select p_mydayid as mydayid, false as iserror, '' as errormessage ) as kk; ELSE SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select p_mydayid as mydayid, true as iserror, 'Data Not Saved.' as errormessage ) as kk; END IF; RETURN v_ResultData; elseif(p_mode = 4) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select md.mydayid, md.uuid, to_char( md.starttime, 'yyyy-MM-dd HH:mm:ss.SS' ) as starttime, md.startlat, md.startlng, mdtm.travelingmode, COALESCE(mdtm.openingkm, 0) as openingkm, mdtm.openingtime, mdtm.openinglat, mdtm.openinglng, mdtm.mydaytravelingmodeuuid from tblmyday as md left join tblmydaytravelingmode as mdtm on mdtm.mydayid = md.mydayid where createdby = p_userid and endtime is null order by md.mydayid desc, mdtm.openingtime desc limit 1 ) as kk; RETURN v_ResultData; elseif(p_mode = 5) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( ( select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, '' as tname, null as checkintime, null as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and visitortype = '' where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, cm.customername as tname, 'Check In ' || to_char( cv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( cv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Customer' inner join tblcustomervisit as cv on md.mydayid = cv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = cv.customervisitplanid ELSE mdl.lat = cv.checkinlat and mdl.lng = cv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( cv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblcustomervisitplan as cvp on cvp.customervisitplanid = cv.customervisitplanid inner join tblcustomermaster as cm on cm.id = cvp.customerid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, rm.name as tname, 'Check In ' || to_char( rv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( rv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Retailer' inner join tblretailervisit as rv on md.mydayid = rv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = rv.retailervisitplanid ELSE mdl.lat = rv.checkinlat and mdl.lng = rv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( rv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblretailervisitplan as rvp on rvp.retailervisitplanid = rv.retailervisitplanid inner join tblretailer as rm on rm.retailerid = rvp.retailerid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, fm.name as tname, 'Check In ' || to_char( fv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( fv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Farmer' inner join tblfarmervisit as fv on md.mydayid = fv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = fv.farmervisitplanid ELSE mdl.lat = fv.checkinlat and mdl.lng = fv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( fv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblfarmervisitplan as fvp on fvp.farmervisitplanid = fv.farmervisitplanid inner join tblfarmer as fm on fm.farmerid = fvp.farmerid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( fmv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( fmv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Farmer Meeting' inner join tblfarmermeetingvisit as fmv on md.mydayid = fmv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN 1 = 1 ELSE mdl.lat = fmv.checkinlat and mdl.lng = fmv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( fmv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblfarmermeetingvisiter as fmm on fmm.farmermeetingvisiterid = fmv.farmermeetingvisiterid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = fmm.farmermeetingvisitplanid ELSE 1 = 1 END inner join tblfarmermeetingvisitplan as fmvp on fmvp.farmermeetingvisitplanid = fmm.farmermeetingvisitplanid inner join tbluserlogin as ul on ul.userid = fmm.visiterid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( dv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( dv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Demo' inner join tbldemovisit as dv on md.mydayid = dv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN 1 = 1 ELSE mdl.lat = dv.checkinlat and mdl.lng = dv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( dv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tbldemovisiter as dm on dm.demovisiterid = dv.demovisiterid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = dm.demovisitplanid ELSE 1 = 1 END inner join tbldemovisitplan as dvp on dvp.demovisitplanid = dm.demovisitplanid inner join tbluserlogin as ul on ul.userid = dvp.visiterid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( ov.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( ov.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Other' inner join tbllothervisit as ov on md.mydayid = ov.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = ov.othervisitplanid ELSE mdl.lat = ov.checkinlat and mdl.lng = ov.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( ov.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblothervisitplan as ovp on ovp.othervisitplanid = ov.othervisitplanid inner join tbluserlogin as ul on ul.userid = ovp.visiterid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( rv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( rv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Review Meeting' inner join tbllreviewmeetingvisit as rv on md.mydayid = rv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN 1 = 1 ELSE mdl.lat = rv.checkinlat and mdl.lng = rv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( rv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblreviewmeetingvisiter as rmv on rmv.reviewmeetingvisiterid = rv.reviewmeetingvisiterid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = rmv.reviewmeetingvisitplanid ELSE 1 = 1 END inner join tblreviewmeetingvisitplan as rvp on rvp.reviewmeetingvisitplanid = rmv.reviewmeetingvisitplanid inner join tbluserlogin as ul on ul.userid = rmv.visiterid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( fv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( fv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'FollowUpDay' inner join tblfollowupvisit as fv on md.mydayid = fv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN 1 = 1 ELSE mdl.lat = fv.checkinlat and mdl.lng = fv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( fv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tbldemovisiter as dmv on dmv.demovisiterid = fv.demovisiterid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = dmv.demovisitplanid ELSE 1 = 1 END inner join tblfollowupvisitplan as fvp on fvp.followupvisitplanid = fv.followupvisitplanid inner join tbluserlogin as ul on ul.userid = dmv.inviteeid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( fdv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( fdv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'FieldDay' inner join tblfielddayvisit as fdv on md.mydayid = fdv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN 1 = 1 ELSE mdl.lat = fdv.checkinlat and mdl.lng = fdv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( fdv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tbldemovisiter as dmv on dmv.demovisiterid = fdv.demovisiterid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = dmv.demovisitplanid ELSE 1 = 1 END inner join tblfielddayvisitplan as fdvp on dmv.demovisitplanid = fdvp.demovisitplanid inner join tbluserlogin as ul on ul.userid = dmv.inviteeid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END union all select distinct md.uuid as mydayid, mdl.lat as lat, mdl.lng as lng, to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI:SS' ) as capturetime, mdl.travelingmode as travelingmode, mdl.visitortype as visitortype, mdl.travelinguid, ul.displayname as tname, 'Check In ' || to_char( sv.checkintime, 'yyyy-mm-dd HH24:MI:SS' ) as checkintime, 'Check Out ' || to_char( sv.checkouttime, 'yyyy-mm-dd HH24:MI:SS' ) as checkouttime from tblmydaylocation as mdl inner join tblmyday as md on md.mydayid = mdl.mydayid and mdl.visitortype = 'Stock' inner join tblstockvisit as sv on md.mydayid = sv.mydayid and CASE WHEN( mdl.capturetime :: date >= '2021-03-01' :: date ) THEN mdl.visitplanid = sv.stockvisitplanid ELSE mdl.lat = sv.checkinlat and mdl.lng = sv.checkinlng and to_char( mdl.capturetime, 'yyyy-mm-dd HH24:MI' ) = to_char( sv.checkintime, 'yyyy-mm-dd HH24:MI' ) END inner join tblstockvisitplan as svp on svp.stockvisitplanid = sv.stockvisitplanid inner join tbluserlogin as ul on ul.userid = svp.visiterid where CASE WHEN(p_mydayid is not null) THEN md.mydayid = p_mydayid ELSE md.uuid = p_mydayuuid END ) order by capturetime asc ) as kk; RETURN v_ResultData; elseif(p_mode = 6) THEN select md.mydayid, md.createdby, ul.subusertypeid, COALESCE(lv.lookupvalue, 'N/A') into v_mydayid, v_visiterid, v_subusertypeid, v_vehicletype from tblmyday as md inner join tbluserlogin as ul on ul.userid = md.createdby left join tbllookupvalues as lv on lv.lookupvalueid = ul.vehicleid where md.starttime :: date = p_journeydate and md.createdby = p_userid order by md.mydayid desc limit 1; IF EXISTS ( select 1 from tbllreviewmeetingvisit as rmv inner join tblreviewmeetingvisiter as rmvi on rmvi.reviewmeetingvisiterid = rmv.reviewmeetingvisiterid where rmv.mydayid = v_mydayid and rmvi.visiterid = v_visiterid ) THEN v_isreviewmeeting := true; ELSE v_isreviewmeeting := false; END IF; select fuelprice, maintenanceprice into v_2wfuelprice, v_2wmaintenanceprice from tblfuelandmaintenancemaster as famm inner join tbllookupvalues as lv on lv.lookupvalueid = famm.vehicletypeid where p_journeydate between famm.fromdate and famm.todate and lv.lookupvalue = '2W - Owned'; select fuelprice, maintenanceprice into v_4wfuelprice, v_4wmaintenanceprice from tblfuelandmaintenancemaster as famm inner join tbllookupvalues as lv on famm.vehicletypeid = lv.lookupvalueid where p_journeydate :: date between famm.fromdate and famm.todate and lv.lookupvalue = ( select CASE WHEN( lv.lookupvalue ilike '%2w%' or lv.lookupvalue = 'N/A' ) THEN '4W - Owned' else lv.lookupvalue end from tbluserlogin as ul inner join tbllookupvalues as lv on ul.vehicleid = lv.lookupvalueid where ul.userid = v_visiterid ); select sum( calculate_distance( t1.lat, t1.lng, t2.lat, t2.lng, 'K' ) ) into v_2wgeokm from ( select row_number() over( order by capturetime asc ) as no , * from tblmydaylocation where mydayid = v_mydayid and travelingmode = '2w' and lat != 0 and lng != 0 ) t1 inner join ( select row_number() over( order by capturetime asc ) as no , * from tblmydaylocation where mydayid = v_mydayid and travelingmode = '2w' and lat != 0 and lng != 0 ) t2 on t1.no = t2.no + 1 group by t1.mydayid; select sum( calculate_distance( t1.lat, t1.lng, t2.lat, t2.lng, 'K' ) ) into v_4wgeokm from ( select row_number() over( order by capturetime asc ) as no , * from tblmydaylocation where mydayid = v_mydayid and travelingmode = '4w' and lat != 0 and lng != 0 ) t1 inner join ( select row_number() over( order by capturetime asc ) as no , * from tblmydaylocation where mydayid = v_mydayid and travelingmode = '4w' and lat != 0 and lng != 0 ) t2 on t1.no = t2.no + 1 group by t1.mydayid; select sum(closingkm - openingkm) as "2wocdiff", STRING_AGG( CONCAT('Open kms :', openingkm), '|' ) as op, STRING_AGG( CONCAT('Close kms :', closingkm), '|' ) as cp into v_2wocdiff, v_2wopenkm, v_2wclosekm from tblmyday as md left join tblmydaytravelingmode as mdtm on mdtm.mydayid = md.mydayid where md.mydayid = v_mydayid and travelingmode = '2w' group by md.mydayid; select sum(closingkm - openingkm) as "2wocdiff", STRING_AGG( CONCAT('Open kms :', openingkm), '|' ) as op, STRING_AGG( CONCAT('Close kms :', closingkm), '|' ) as cp into v_4wocdiff, v_4wopenkm, v_4wclosekm from tblmyday as md left join tblmydaytravelingmode as mdtm on mdtm.mydayid = md.mydayid where md.mydayid = v_mydayid and travelingmode = '4w' group by md.mydayid; select hotelallowance into v_awithfriendrelative from tblhotelallowance as ha inner join tbllookupvalues as cat on cat.lookupvalueid = ha.categoryid where ha.subusertypeid = v_subusertypeid and cat.lookupvalue = 'A' and staytype = 'With friends – Relatives' and p_journeydate between ha.fromdate and ha.todate limit 1; select hotelallowance into v_bwithfriendrelative from tblhotelallowance as ha inner join tbllookupvalues as cat on cat.lookupvalueid = ha.categoryid where ha.subusertypeid = v_subusertypeid and cat.lookupvalue = 'B' and staytype = 'With friends – Relatives' and p_journeydate between ha.fromdate and ha.todate limit 1; select ndaamount into v_ndaamount from tblda as da where da.subusertypeid = v_subusertypeid and p_journeydate between da.fromdate and da.todate; select sum( COALESCE(actualkm2w, 0) + COALESCE(actualkm4w, 0) ) into v_mtd from tblmyday as md inner join tblexpense as ex on ex.mydayid = md.mydayid inner join tbltravelingexpense as te on te.expenseid = ex.expenseid where md.createdby = p_userid and md.createddate :: date between ( to_char(now(), 'yyyy')|| '-' || to_char(now(), 'MM')|| '-01' ):: date and now() :: date; select sum( COALESCE(actualkm2w, 0) + COALESCE(actualkm4w, 0) ) into v_ytd from tblmyday as md inner join tblexpense as ex on ex.mydayid = md.mydayid inner join tbltravelingexpense as te on te.expenseid = ex.expenseid where md.createdby = p_userid and md.createddate :: date between ( select startdate from getfinancialdate(p_journeydate :: date) ) and ( select enddate from getfinancialdate(p_journeydate :: date) ); select ruleid into _ruleid from tblclaimrules WHERE (startdate, enddate) OVERLAPS ( p_journeydate :: DATE, p_journeydate :: DATE ); if(_ruleid is not null) then select extract( day from p_journeydate ), extract( month from p_journeydate ), extract( year from p_journeydate ) into _day, _month, _year; select deadline, today into _deadline, _today from tbldeadline where _day >= fromday and _day <= today and ruleid = _ruleid and rtype = 'Claim'; if(_deadline is not null) then if(_today = 31) then _month = _month + 1; if(_month = 13) then _month = 1; _year = _year + 1; end if; if( _month = 4 or _month = 6 or _month = 9 or _month = 11 and _deadline > 30 ) then _deadline = 30; elseif( _month = 2 and _deadline > 28 ) then _deadline = 28; end if; end if; select concat( _deadline :: character varying, '-', _month :: character varying, '-', _year :: character varying ) into _deadlinedate; else _deadlinedate = current_date; end if; else _ruleid = 0; end if; raise notice 'hii %s', _deadline; RAISE NOTICE '_deadlinedate %', _deadlinedate; raise notice '_ruleid %', _ruleid; raise notice 'hii %s', _day; raise notice 'hii %s', _month; raise notice 'hii %s', _year; select isallowadminclaimsubmission into _isallowadminclaimsubmission from tblmyday where createddate :: date = p_journeydate and createdby = p_userid; raise notice '_isallowadminclaimsubmission %s', _isallowadminclaimsubmission; if( _isallowadminclaimsubmission is null ) then _isallowadminclaimsubmission = false; end if; raise notice 'hii %s', _isallowadminclaimsubmission; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select COALESCE(v_mydayid, 0) as mydayid, p_journeydate as journeydate, COALESCE(v_2wfuelprice, 0) as fuelprice2w, COALESCE(v_2wmaintenanceprice, 0) as maintenanceprice2w, COALESCE(v_4wfuelprice, 0) as fuelprice4w, COALESCE(v_4wmaintenanceprice, 0) as maintenanceprice4w, TRUNC( COALESCE(v_2wgeokm, 0) ) as geokm2w, TRUNC( COALESCE(v_4wgeokm, 0) ) as geokm4w, TRUNC( COALESCE(v_2wocdiff, 0) ) as ocdiff2w, COALESCE(v_2wopenkm, 'Open Kms :0.00') as openkm2w, COALESCE(v_2wclosekm, 'Close Kms :0.00') as closekm2w, TRUNC( COALESCE(v_4wocdiff, 0) ) as ocdiff4w, COALESCE(v_4wopenkm, 'Open Kms :0.00') as openkm4w, COALESCE(v_4wclosekm, 'Close Kms :0.00') as closekm4w, TRUNC( COALESCE(v_awithfriendrelative, 0) ) as awithfriendrelative, TRUNC( COALESCE(v_bwithfriendrelative, 0) ) as bwithfriendrelative, TRUNC( COALESCE(v_ndaamount, 0) ) as ndaamount, v_isreviewmeeting as isreviewmeeting, v_mtd as mtd, v_ytd as ytd, CASE WHEN(v_vehicletype = 'N/A') THEN true ELSE false END as isnovehicletype, case when( current_date <= _deadlinedate :: date or _ruleid = 0 or _isallowadminclaimsubmission is true ) then true else false end as isclaimvalidate ) as kk; RETURN v_ResultData; elseif(p_mode = 7) THEN IF EXISTS( select 1 from tblexpense where mydayid = p_mydayid ) THEN select expenseid into v_expenseid from tblexpense where mydayid = p_mydayid; update tblexpense set totalamount = p_totalamount, modifiedby = p_userid, modifieddate = now() where expenseid = v_expenseid; ELSE insert into tblexpense( mydayid, statusid, statuschangedby, statuschangeddate, totalamount, createdby, createddate ) values ( p_mydayid, 5, p_userid, now(), p_totalamount, p_userid, now() ); v_expenseid := LASTVAL(); END IF; update tblmyday set validflag = p_validflag where mydayid = p_mydayid; IF EXISTS( select 1 from tbltravelingexpense where expenseid = v_expenseid ) THEN update tbltravelingexpense set fuelprice2w = t.fuelprice2w, maintenanceprice2w = t.maintenanceprice2w, geokm2w = t.geokm2w, openkm2w = t.openkm2w, closekm2w = t.closekm2w, ocdiff2w = t.ocdiff2w, actualkm2w = t.actualkm2w, fuelprice4w = t.fuelprice4w, maintenanceprice4w = t.maintenanceprice4w, geokm4w = t.geokm4w, ocdiff4w = t.ocdiff4w, openkm4w = t.openkm4w, closekm4w = t.closekm4w, actualkm4w = t.actualkm4w, travelfrom = t.travelfrom, travelto = t.travelto, bus = t.bus, train = t.train, air = t.air, auto = t.auto, cab = t.cab, other = t.other, withother = t.withother, totalamount = t.totalamount from ( select td.fuelprice2w, td.maintenanceprice2w, td.geokm2w, td.openkm2w, td.closekm2w, td.ocdiff2w, td.actualkm2w, td.fuelprice4w, td.maintenanceprice4w, td.geokm4w, td.ocdiff4w, td.openkm4w, td.closekm4w, td.actualkm4w, td.travelfrom, td.travelto, td.bus, td.train, td.air, td.auto, td.cab, td.other, td.withother, td.totalamount from json_to_recordset(p_json) as td( fuelprice2w numeric(18, 2), maintenanceprice2w numeric(18, 2), geokm2w numeric(18, 2), openkm2w character varying(500), closekm2w character varying(500), ocdiff2w numeric(18, 2), actualkm2w numeric(18, 2), fuelprice4w numeric(18, 2), maintenanceprice4w numeric(18, 2), geokm4w numeric(18, 2), ocdiff4w numeric(18, 2), openkm4w character varying(500), closekm4w character varying(500), actualkm4w numeric(18, 2), travelfrom character varying(50), travelto character varying(50), bus int, train int, air int, auto int, cab int, other int, withother int, totalamount numeric(18, 2) ) ) as t where tbltravelingexpense.expenseid = v_expenseid; ELSE insert into tbltravelingexpense( expenseid, fuelprice2w, maintenanceprice2w, geokm2w, openkm2w, closekm2w, ocdiff2w, actualkm2w, fuelprice4w, maintenanceprice4w, geokm4w, ocdiff4w, openkm4w, closekm4w, actualkm4w, travelfrom, travelto, bus, train, air, auto, cab, other, withother, totalamount ) select v_expenseid, td.fuelprice2w, td.maintenanceprice2w, td.geokm2w, td.openkm2w, td.closekm2w, td.ocdiff2w, td.actualkm2w, td.fuelprice4w, td.maintenanceprice4w, td.geokm4w, td.ocdiff4w, td.openkm4w, td.closekm4w, td.actualkm4w, td.travelfrom, td.travelto, td.bus, td.train, td.air, td.auto, td.cab, td.other, td.withother, td.totalamount from json_to_recordset(p_json) as td( fuelprice2w numeric(18, 2), maintenanceprice2w numeric(18, 2), geokm2w numeric(18, 2), openkm2w character varying(500), closekm2w character varying(500), ocdiff2w numeric(18, 2), actualkm2w numeric(18, 2), fuelprice4w numeric(18, 2), maintenanceprice4w numeric(18, 2), geokm4w numeric(18, 2), ocdiff4w numeric(18, 2), openkm4w character varying(500), closekm4w character varying(500), actualkm4w numeric(18, 2), travelfrom character varying(50), travelto character varying(50), bus int, train int, air int, auto int, cab int, other int, withother int, totalamount numeric(18, 2) ); END IF; IF EXISTS( select 1 from tblaccommodationexpense where expenseid = v_expenseid ) THEN select accommodationexpenseid into v_accommodationexpenseid from tblaccommodationexpense where expenseid = v_expenseid; update tblaccommodationexpense set type = td.type, issharingstay = CASE WHEN(td.issharingstay) THEN 1 :: bit else 0 :: bit end, sharingwith = td.sharingwith, staywith = td.staywith, totalamount = td.totalamount, cityid = td.cityid, othercityname = td.othercityname from json_to_recordset(p_json1) as td( type character varying(50), issharingstay boolean, sharingwith character varying(50), staywith int, totalamount numeric(18, 2), cityid int, othercityname character varying(50) ) where tblaccommodationexpense.expenseid = v_expenseid; ELSE insert into tblaccommodationexpense( expenseid, type, issharingstay, sharingwith, staywith, totalamount, cityid, othercityname ) select v_expenseid, td.type, CASE WHEN(td.issharingstay) THEN 1 :: bit else 0 :: bit end, td.sharingwith, td.staywith, td.totalamount, td.cityid, td.othercityname from json_to_recordset(p_json1) as td( type character varying(50), issharingstay boolean, sharingwith character varying(50), staywith int, totalamount numeric(18, 2), cityid int, othercityname character varying(50) ); v_accommodationexpenseid := LASTVAL(); END IF; IF EXISTS ( select 1 from tblaccommodationexpense where type = '3' and p_validflag = 0 and accommodationexpenseid = v_accommodationexpenseid and ( billsubmitexpenseid = v_expenseid or billsubmitexpenseid is null ) ) THEN PERFORM usp_mydaycrud( p_mode := 8, p_userid := p_userid, p_mydayid := p_mydayid, p_mydayuuid := null, p_totalamount := p_totalamount, p_journeydate := null, p_json := null, p_json1 := null, p_json2 := p_json2, p_json3 := null ); ELSE delete from tblhotelbill where accommodationexpenseid = v_accommodationexpenseid; delete from tblhotelbillattachment where hotelbillid in ( select hotelbillid from tblhotelbill where accommodationexpenseid = v_accommodationexpenseid ); update tblmyday set statusid = 5 where mydayid in ( select myday.mydayid from tblmyday as myday inner join tblexpense as ex on ex.mydayid = myday.mydayid inner join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid where aex.billsubmitexpenseid = v_expenseid ); update tblaccommodationexpense set billsubmitexpenseid = null where billsubmitexpenseid = v_expenseid; IF EXISTS( select 1 from tblexpense where COALESCE(totalamount, 0) = 0 and mydayid = p_mydayid ) THEN IF coalesce(p_validflag, 0) > 0 then raise notice '%', '15'; update tblmyday set statusid = 6, statuschangedby = p_userid, statuschangeddate = now() where mydayid = p_mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) values (p_mydayid, 6, p_userid, now()); ELSE raise notice '%', '11'; update tblmyday set statusid = 6, statuschangedby = p_userid, statuschangeddate = now() where mydayid = p_mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) values (p_mydayid, 6, p_userid, now()); End if; ELSE raise notice '%', '6'; update tblmyday set statusid = 6, statuschangedby = p_userid, statuschangeddate = now() where mydayid = p_mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) values (p_mydayid, 6, p_userid, now()); END IF; END IF; IF EXISTS( select 1 from tbldaexpense where expenseid = v_expenseid ) THEN update tbldaexpense set totalamount = td.totalamount from json_to_recordset(p_json3) as td( totalamount numeric(10, 2) ) where tbldaexpense.expenseid = v_expenseid; ELSE insert into tbldaexpense(expenseid, totalamount) select v_expenseid, td.totalamount from json_to_recordset(p_json3) as td( totalamount numeric(10, 2) ); END IF; delete from tbltravelingdocument where filename in ( select regexp_split_to_table(traveling, ',') as traveling from json_to_record(p_json4) as td(traveling character varying) ); delete from tblhotelbillattachment where filename in ( select regexp_split_to_table(hotelbill, ',') as hotelbill from json_to_record(p_json4) as td(hotelbill character varying) ); SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select ex.expenseid, COALESCE(tex.travelingexpenseid, 0) as travelingexpenseid, COALESCE(hb.hotelbillid, 0) as hotelbillid from tblexpense as ex left join tbltravelingexpense as tex on tex.expenseid = ex.expenseid left join tblaccommodationexpense as ae on ae.expenseid = ex.expenseid left join tblhotelbill as hb on hb.accommodationexpenseid = ae.accommodationexpenseid where ex.expenseid = v_expenseid ) as kk; RETURN v_ResultData; elseif(p_mode = 8) THEN select expenseid into v_expenseid from tblexpense where mydayid = p_mydayid; select accommodationexpenseid into v_accommodationexpenseid from tblaccommodationexpense where expenseid = v_expenseid; select td.hotelgstno, td.checkindate :: date, td.checkoutdate :: date into _gstno, v_checkindate, v_checkoutdate from json_to_recordset(p_json2) as td( hotelgstno character varying(50), hotelname character varying(50), city character varying(50), isgsthotel boolean, checkindate date, checkoutdate date ); if exists( select 1 from tblhotelmaster where hotelgstno = _gstno ) then update tblmyday set statusid = 5, statuschangedby = p_userid, statuschangeddate = now() from tblmyday myday inner join tblexpense as ex on myday.mydayid = ex.mydayid inner join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid and aex.billsubmitexpenseid = v_expenseid left join generate_series( v_checkindate, ( CASE WHEN(v_checkindate = v_checkoutdate) THEN v_checkoutdate ELSE v_checkoutdate :: date - 1 END ), '1 day' :: interval ) as s on s :: date = myday.starttime :: date where s is null and tblmyday.mydayid = myday.mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) select myday.mydayid, 5, p_userid, now() from tblmyday myday inner join tblexpense as ex on myday.mydayid = ex.mydayid inner join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid and aex.billsubmitexpenseid = v_expenseid left join generate_series( v_checkindate, ( CASE WHEN(v_checkindate = v_checkoutdate) THEN v_checkoutdate ELSE v_checkoutdate :: date - 1 END ), '1 day' :: interval ) as s on s :: date = myday.starttime :: date where s is null; update tblaccommodationexpense set billsubmitexpenseid = null where billsubmitexpenseid = v_expenseid; update tblhotelmaster set hotelgstno = t.hotelgstno, hotelname = t.hotelname, city = t.city, modifiedby = p_userid, modifieddate = now(), isnewhotel = '0' from ( select td.hotelgstno, td.hotelname, td.city, td.isgsthotel from json_to_recordset(p_json2) as td( hotelgstno character varying(50), hotelname character varying(50), city character varying(50), isgsthotel boolean ) ) as t where t.isgsthotel = true and t.hotelgstno = tblhotelmaster.hotelgstno; insert into tblhotelmaster( hotelgstno, hotelname, city, createdby, createddate, isnewhotel ) select hotelgstno, hotelname, city, p_userid, now(), '0' from ( select h.hotelid, td.hotelgstno, row_number() over(partition by td.hotelgstno) as no, td.hotelname, td.city from json_to_recordset(p_json2) as td( hotelgstno character varying(50), hotelname character varying(50), city character varying(50), isgsthotel boolean ) left join tblhotelmaster as h on h.hotelgstno = td.hotelgstno where h.hotelid is null and td.isgsthotel = true ) as t where t.no = 1; else update tblaccommodationexpense set billsubmitexpenseid = null where billsubmitexpenseid = v_expenseid; update tblhotelmaster set hotelgstno = t.hotelgstno, hotelname = t.hotelname, city = t.city, modifiedby = p_userid, modifieddate = now(), isnewhotel = '1' from ( select td.hotelgstno, td.hotelname, td.city, td.isgsthotel from json_to_recordset(p_json2) as td( hotelgstno character varying(50), hotelname character varying(50), city character varying(50), isgsthotel boolean ) ) as t where t.hotelgstno = tblhotelmaster.hotelgstno; insert into tblhotelmaster( hotelgstno, hotelname, city, createdby, createddate, isnewhotel ) select hotelgstno, hotelname, city, p_userid, now(), '1' from ( select h.hotelid, td.hotelgstno, row_number() over(partition by td.hotelgstno) as no, td.hotelname, td.city from json_to_recordset(p_json2) as td( hotelgstno character varying(50), hotelname character varying(50), city character varying(50), isgsthotel boolean ) left join tblhotelmaster as h on h.hotelgstno = td.hotelgstno where h.hotelid is null ) as t where t.no = 1; end if; IF EXISTS( select 1 from tblhotelbill where accommodationexpenseid = v_accommodationexpenseid ) THEN update tblhotelbill set checkindate = td.checkindate, checkoutdate = td.checkoutdate, newbilldate = td.newbilldate, billno = td.billno, roomno = td.roomno, hotelgstno = td.hotelgstno, beforegst = td.beforegst, sgst = td.sgst, cgst = td.cgst, claimamount = td.claimamount, isgsthotel = td.isgsthotel, hotelname = CASE WHEN(td.isgsthotel = true) THEN NULL ELSE td.hotelname END, city = td.city, discount = td.discount, cityid = td.cityid, claimlimit = td.claimlimit from json_to_recordset(p_json2) as td( checkindate date, checkoutdate date, newbilldate date, billno character varying, roomno character varying, hotelgstno character varying, beforegst numeric(10, 2), sgst numeric(10, 2), cgst numeric(10, 2), claimamount numeric(10, 2), isgsthotel boolean, hotelname character varying(50), city character varying(50), discount numeric(10, 2), cityid integer, claimlimit numeric(10, 2) ) where tblhotelbill.accommodationexpenseid = v_accommodationexpenseid; ELSE insert into tblhotelbill( accommodationexpenseid, checkindate, checkoutdate, newbilldate, billno, roomno, hotelgstno, beforegst, sgst, cgst, claimamount, isgsthotel, hotelname, city, discount, cityid, claimlimit ) select v_accommodationexpenseid, td.checkindate, td.checkoutdate, td.newbilldate, td.billno, td.roomno, td.hotelgstno, td.beforegst, td.sgst, td.cgst, td.claimamount, td.isgsthotel, CASE WHEN(td.isgsthotel = true) THEN NULL ELSE td.hotelname END, td.city, td.discount, td.cityid, td.claimlimit from json_to_recordset(p_json2) as td( checkindate date, checkoutdate date, newbilldate date, billno character varying, roomno character varying, hotelgstno character varying, beforegst numeric(10, 2), sgst numeric(10, 2), cgst numeric(10, 2), claimamount numeric(10, 2), isgsthotel boolean, hotelname character varying(50), city character varying(50), discount numeric(10, 2), cityid integer, claimlimit numeric(10, 2) ); END IF; select td.checkindate, td.checkoutdate into p_checkindate, p_checkoutdate from json_to_recordset(p_json2) as td( checkindate date, checkoutdate date ); v_startdate := p_checkindate; v_enddate := p_checkoutdate; WHILE v_startdate <= v_enddate LOOP update tblmyday set statusid = 6, statuschangedby = p_userid, statuschangeddate = now() from ( select md.mydayid, ae.expenseid, ae.type, ae.billsubmitexpenseid from tblmyday as md left join tblexpense as ex on ex.mydayid = md.mydayid left join tblaccommodationexpense as ae on ae.expenseid = ex.expenseid where md.createdby = p_userid and md.starttime :: date = v_startdate order by md.mydayid desc limit 1 ) as t where t.mydayid = tblmyday.mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) select md.mydayid, 6, p_userid, now() from tblmyday as md where md.createdby = p_userid and md.starttime :: date = v_startdate order by md.mydayid desc limit 1; update tblaccommodationexpense set billsubmitexpenseid = v_expenseid from ( select md.mydayid, ae.expenseid, ae.type, ae.billsubmitexpenseid from tblmyday as md left join tblexpense as ex on ex.mydayid = md.mydayid left join tblaccommodationexpense as ae on ae.expenseid = ex.expenseid where md.createdby = p_userid and md.starttime :: date = v_startdate order by md.mydayid desc limit 1 ) as t where t.expenseid = tblaccommodationexpense.expenseid; v_startdate := v_startdate + 1; if( p_checkindate != p_checkoutdate and v_startdate = p_checkoutdate ) THEN v_startdate := v_startdate + 1; END IF; END LOOP; IF EXISTS( select 1 from tblaccommodationexpense where expenseid = v_expenseid and type = '3' ) THEN IF EXISTS( select 1 from tblhotelbill where accommodationexpenseid = ( select accommodationexpenseid from tblaccommodationexpense where expenseid = v_expenseid and type = '3' ) ) THEN select claimamount into v_claimamount from tblhotelbill where accommodationexpenseid = v_accommodationexpenseid; update tblaccommodationexpense set totalamount = v_claimamount where accommodationexpenseid = v_accommodationexpenseid; if (p_totalamount is null) THEN update tblexpense set totalamount = ( COALESCE(totalamount, 0) + COALESCE(v_claimamount, 0) ) where expenseid = v_expenseid; END IF; ELSE update tblmyday set statusid = 5, statuschangedby = p_userid, statuschangeddate = now() where mydayid = p_mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) values (p_mydayid, 5, p_userid, now()); END IF; ELSE update tblmyday set statusid = 6, statuschangedby = p_userid, statuschangeddate = now() where mydayid = p_mydayid; insert into tblmydaystatushistory( mydayid, statusid, statuschangedby, statuschangedate ) values (p_mydayid, 6, p_userid, now()); END IF; delete from tblhotelbillattachment where filename in ( select regexp_split_to_table(hotelbill, ',') as hotelbill from json_to_record(p_json4) as td(hotelbill character varying) ); SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select hotelbillid, v_expenseid as expenseid from tblhotelbill where accommodationexpenseid = v_accommodationexpenseid ) as kk; RETURN v_ResultData; elseif(p_mode = 9) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select hotelgstno, hotelname, city from tblhotelmaster where lower(hotelgstno) = lower(p_gstno) ) as kk; RETURN v_ResultData; elseif(p_mode = 10) THEN insert into tblhotelbillattachment( hotelbillid, filename, displayfilename, createdby, createddate ) select id, tfilename, filename, p_userid, now() from json_to_recordset(p_json1) as td( id integer, tfilename character varying(200), filename character varying(200) ); insert into tbltravelingdocument( travelingexpenseid, filename, displayfilename, createdby, createddate ) select id, tfilename, filename, p_userid, now() from json_to_recordset(p_json) as td( id integer, tfilename character varying(200), filename character varying(200) ); SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select p_expenseid as expenseid ) as kk; RETURN v_ResultData; elseif(p_mode = 11) THEN v_startdate := p_checkindate; v_enddate := p_checkoutdate; select sut.subusertype, vwzs.salesdistrictidlist into _subusertype, v_subregionid from tbluserlogin as ul inner join tblsubusertype as sut on sut.subusertypeid = ul.subusertypeid left join vwzonesubregionsalesdistrict as vwzs on vwzs.userid = ul.userid where ul.userid = p_userid; if p_claimdate is not null and p_checkindate != p_checkoutdate and p_claimdate + 1 != p_checkoutdate then v_errormessage := v_errormessage || '\n' || ' Invalid Checkout Date ' || to_char(v_enddate, 'dd/MM/yyyy')|| ', Please submit hotel claim on the last day of a hotel stay.'; v_isvalid := TRUE; end if; WHILE v_startdate <= v_enddate LOOP v_mydayid := null; v_expenseid := null; v_type := null; select md.mydayid, ae.expenseid, ae.type, ae.billsubmitexpenseid, md.statusid into v_mydayid, v_expenseid, v_type, v_billsubmitexpenseid, v_statusid from tblmyday as md left join tblexpense as ex on ex.mydayid = md.mydayid left join tblaccommodationexpense as ae on ae.expenseid = ex.expenseid where md.createdby = p_userid and md.starttime :: date = v_startdate order by md.mydayid desc limit 1; RAISE NOTICE '%', COALESCE(v_mydayid, 0) || ', ' || COALESCE(v_expenseid, 0) || ', ' || COALESCE(v_type, '')|| ', ' || COALESCE(v_billsubmitexpenseid, 0); RAISE NOTICE 'v_statusid := %', v_statusid; IF v_mydayid is null THEN v_errormessage := v_errormessage || '\n' || ' In this ' || to_char(v_startdate, 'dd/MM/yyyy')|| ' date you have not attend any visit.'; v_isvalid := TRUE; ELSEIF p_claimdate is not null and v_startdate = p_claimdate THEN IF ( v_statusid in (15) ) THEN v_errormessage := v_errormessage || '\n' || ' You have not matched minimum visit criteria hence you can’t claim.'; v_isvalid := TRUE; END IF; ELSEIF v_expenseid is null THEN v_errormessage := v_errormessage || '\n' || ' Please enter expence of ' || to_char(v_startdate, 'dd/MM/yyyy')|| ' date.'; v_isvalid := TRUE; ELSEIF v_type is null THEN v_errormessage := v_errormessage || '\n' || ' Please enter accommodation detail of ' || to_char(v_startdate, 'dd/MM/yyyy')|| ' date.'; v_isvalid := TRUE; ELSEIF v_type != '3' THEN v_errormessage := v_errormessage || '\n' || ' You need to select accommodation type `Hole - Claimant` for submiting bill of ' || to_char(v_startdate, 'dd/MM/yyyy')|| ' date.'; v_isvalid := TRUE; ELSEIF ( v_billsubmitexpenseid = v_expenseid or v_billsubmitexpenseid is not null ) and v_billsubmitexpenseid != COALESCE(p_expenseid, 0) THEN v_errormessage := v_errormessage || '\n' || ' Hotel bill already submitted on ' || ( select to_char(md.starttime, 'dd/MM/yyyy') from tblexpense as ex inner join tblmyday as md on md.mydayid = ex.mydayid where ex.expenseid = v_billsubmitexpenseid ) || ' date.'; v_isvalid := TRUE; ELSEIF ( v_statusid in (15) ) THEN v_errormessage := v_errormessage || '\n' || ' You have not matched minimum visit criteria hence you can’t claim.'; v_isvalid := TRUE; END IF; RAISE NOTICE '%', v_errormessage; RAISE NOTICE '%', v_startdate; RAISE NOTICE '%', v_isvalid; RAISE NOTICE 'v_statusid := %', v_statusid; select count(*) into _reviewmeetingvisit from tbllreviewmeetingvisit where mydayid = v_mydayid; if( v_statusid in (4, 5, 6, 7, 8) and NOT EXISTS( select 1 from tblmydaystatushistory where mydayid = v_mydayid and statusid = 9 ) and _reviewmeetingvisit = 0 ) Then RAISE NOTICE 'v_startdate := %', v_startdate; select subusertypeid into _subusertypeid from tblsubusertype where subusertype = _subusertype; select COALESCE(meetingtime, 0), COALESCE(customer, 0), COALESCE(retailer, 0), COALESCE(ifm, 0), COALESCE(ofm, 0), COALESCE(reviewmeeting, 0), COALESCE(demo, 0), COALESCE(followupday, 0), COALESCE(fieldday, 0), COALESCE(others, 0), COALESCE(total, 0), COALESCE(retailermeetingtime, 0), COALESCE(daystarttime, '00:00:00' :: time), COALESCE(dayendtime, '00:00:00' :: time), COALESCE( firstcheckintime, '00:00:00' :: time ) into v_validationmeetingtime, v_validationcustomer, v_validationretailer, v_validationifm, v_validationofm, v_validationreviewmeeting, v_validationdemo, v_validationfollowupday, v_validationfieldday, v_validationothers, v_validationtotal, v_validationretailermeetingtime, v_daystarttime, v_dayendtime, v_firstcheckintime from tblvisitvalidationmaster where subusertypeid = _subusertypeid and ( p_checkindate between fromdate and todate ) and salesdistrictid in ( select regexp_split_to_table(v_subregionid, ','):: integer ) limit 1; RAISE NOTICE 'v_firstcheckintime := %', v_firstcheckintime; IF ( NOT EXISTS ( select 1 from ( select cv.checkintime from tblcustomervisit as cv where cv.mydayid = v_mydayid union select rv.checkintime from tblretailervisit as rv where rv.mydayid = v_mydayid union select fv.checkintime from tblfarmervisit as fv where fv.mydayid = v_mydayid union select fmv.checkintime from tblfarmermeetingvisit as fmv where fmv.mydayid = v_mydayid union select dv.checkintime from tbldemovisit as dv where dv.mydayid = v_mydayid union select fdv.checkintime from tblfielddayvisit as fdv where fdv.mydayid = v_mydayid union select fuv.checkintime from tblfollowupvisit as fuv where fuv.mydayid = v_mydayid union select ov.checkintime from tbllothervisit as ov where ov.mydayid = v_mydayid ) as t where checkintime :: time <= CASE WHEN( COALESCE( v_firstcheckintime, '00:00:00' :: time ) = '00:00:00' :: time ) THEN checkintime :: time ELSE v_firstcheckintime END ) and COALESCE( v_firstcheckintime, '00:00:00' :: time ) != '00:00:00' :: time ) THEN v_isvalidatefirstcheckin := true; END IF; RAISE NOTICE 'v_daystarttime := %', v_daystarttime; RAISE NOTICE 'v_dayendtime := %', v_dayendtime; IF NOT EXISTS( select 1 from tblmyday where mydayid = v_mydayid and starttime :: timestamp <= ( CASE WHEN( COALESCE( v_daystarttime, '00:00:00' :: time ) = '00:00:00' :: time ) THEN starttime :: timestamp ELSE ( starttime :: date || ' ' || v_daystarttime ):: timestamp END ) and endtime :: timestamp >= ( CASE WHEN( COALESCE(v_dayendtime, '00:00:00' :: time) = '00:00:00' :: time ) THEN endtime :: timestamp ELSE ( endtime :: date || ' ' || v_dayendtime ):: timestamp END ) ) THEN v_isvalidatestartday := true; END IF; select count(*) into _farmermeetingvisit from tblfarmermeetingvisit where mydayid = v_mydayid; select count(*) into _demovisit from tbldemovisit where mydayid = v_mydayid; select count(*) into _customervisit from tblcustomervisit where mydayid = v_mydayid; select count(*) into _retailervisit from tblretailervisit where mydayid = v_mydayid; select count(*) into _farmervisit from tblfarmervisit where mydayid = v_mydayid; select count(*) into _fielddayvisit from tblfielddayvisit where mydayid = v_mydayid; select count(*) into _followupvisit from tblfollowupvisit where mydayid = v_mydayid; select count(*) into _othervisit from tbllothervisit where mydayid = v_mydayid; select count(*) into _customer30minvisit from tblcustomervisit where mydayid = v_mydayid and ( CASE WHEN( checkintime is not null and checkouttime is not null ) THEN DATEDIFF( 'minute', checkintime :: timestamp, checkouttime :: timestamp ) ELSE 0 END ) >= v_validationmeetingtime; select count(*) into _retailerminutevisit from tblretailervisit where mydayid = v_mydayid and ( CASE WHEN( checkintime is not null and checkouttime is not null ) THEN DATEDIFF( 'minute', checkintime :: timestamp, checkouttime :: timestamp ) ELSE 0 END ) >= v_validationretailermeetingtime; RAISE NOTICE '_reviewmeetingvisit := %/%', _reviewmeetingvisit, v_validationreviewmeeting; RAISE NOTICE '_farmermeetingvisit := %/%', _farmermeetingvisit, v_validationofm; RAISE NOTICE '_demovisit := %/%', _demovisit, v_validationdemo; RAISE NOTICE '_retailerminutevisit := %/%', _retailerminutevisit, v_validationretailer; RAISE NOTICE '_farmervisit := %/%', _retailerminutevisit, v_validationifm; RAISE NOTICE '_fielddayvisit := %/%', _fielddayvisit, v_validationfieldday; RAISE NOTICE '_followupvisit := %/%', _followupvisit, v_validationfollowupday; RAISE NOTICE '_othervisit := %/%', _othervisit, v_validationothers; RAISE NOTICE '_customer30minvisit := %/%', _customer30minvisit, v_validationcustomer; RAISE NOTICE 'v_isvalidatefirstcheckin := %', v_isvalidatefirstcheckin; RAISE NOTICE 'v_isvalidatestartday := %', v_isvalidatestartday; if( _reviewmeetingvisit < v_validationreviewmeeting or _farmermeetingvisit < v_validationofm or _demovisit < v_validationdemo or _retailerminutevisit < v_validationretailer or _farmervisit < v_validationifm or _fielddayvisit < v_validationfieldday or _followupvisit < v_validationfollowupday or _othervisit < v_validationothers or _customer30minvisit < v_validationcustomer or ( _reviewmeetingvisit + _farmermeetingvisit + _demovisit + _retailervisit + _farmervisit + _fielddayvisit + _followupvisit + _othervisit + _customervisit ) < v_validationtotal or v_isvalidatefirstcheckin or v_isvalidatestartday ) then v_errormessage := v_errormessage || '\n' || ' You have not matched minimum visit criteria hence you can’t claim.'; v_isvalid := TRUE; end if; END IF; v_startdate := v_startdate + 1; if( p_checkindate != p_checkoutdate and v_startdate = p_checkoutdate ) THEN v_startdate := v_startdate + 1; END IF; END LOOP; IF v_isvalid = FALSE THEN select md.mydayid, accex.sharingwith into v_mydayid, v_sharingwith from tblmyday as md left join tblexpense as ex on ex.mydayid = md.mydayid left join tblaccommodationexpense as accex on accex.expenseid = ex.expenseid where md.createdby = p_userid and md.starttime :: date = CASE WHEN(p_checkindate = p_checkoutdate) THEN p_checkindate ELSE p_checkoutdate - 1 END order by md.mydayid desc limit 1; END IF; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select v_errormessage as errormessage, v_isvalid as iserror, v_mydayid as mydayid ) as kk; RETURN v_ResultData; elseif(p_mode = 12) THEN select md.mydayid, md.createdby, md.createddate :: date, ul.subusertypeid, COALESCE(lv.lookupvalue, 'N/A'), vwzs.salesdistrictidlist into v_mydayid, v_visiterid, p_claimdate, v_subusertypeid, v_vehicletype, v_subregionid from tblmyday as md inner join tbluserlogin as ul on ul.userid = md.createdby left join tbllookupvalues as lv on lv.lookupvalueid = ul.vehicleid left join vwzonesubregionsalesdistrict as vwzs on vwzs.userid = ul.userid where md.mydayid = p_mydayid; IF EXISTS ( select 1 from tbllreviewmeetingvisit as rmv inner join tblreviewmeetingvisiter as rmvi on rmvi.reviewmeetingvisiterid = rmv.reviewmeetingvisiterid where rmv.mydayid = v_mydayid and rmvi.visiterid = v_visiterid ) THEN v_isreviewmeeting := true; ELSE v_isreviewmeeting := false; END IF; select sum( COALESCE(actualkm2w, 0) + COALESCE(actualkm4w, 0) ) into v_mtd from tblmyday as md inner join tblexpense as ex on ex.mydayid = md.mydayid inner join tbltravelingexpense as te on te.expenseid = ex.expenseid where md.createdby = v_visiterid and md.createddate :: date between cast( date_trunc('month', p_claimdate) as date ) and cast( date_trunc('month', p_claimdate) + interval '1 month - 1 day' as date ); select sum( COALESCE(actualkm2w, 0) + COALESCE(actualkm4w, 0) ) into v_ytd from tblmyday as md inner join tblexpense as ex on ex.mydayid = md.mydayid inner join tbltravelingexpense as te on te.expenseid = ex.expenseid where md.createdby = v_visiterid and md.createddate :: date between ( select startdate from getfinancialdate(p_claimdate) ) and ( select enddate from getfinancialdate(p_claimdate) ); select hotelallowance into v_awithfriendrelative from tblhotelallowance as ha inner join tbllookupvalues as cat on cat.lookupvalueid = ha.categoryid where ha.subusertypeid = v_subusertypeid and cat.lookupvalue = 'A' and staytype = 'With friends – Relatives' and p_journeydate between ha.fromdate and ha.todate limit 1; select hotelallowance into v_bwithfriendrelative from tblhotelallowance as ha inner join tbllookupvalues as cat on cat.lookupvalueid = ha.categoryid where ha.subusertypeid = v_subusertypeid and cat.lookupvalue = 'B' and staytype = 'With friends – Relatives' and p_journeydate between ha.fromdate and ha.todate limit 1; select ndaamount into v_ndaamount from tblda as da where da.subusertypeid = v_subusertypeid and p_journeydate between da.fromdate and da.todate; IF EXISTS ( select 1 from tblmydaystatushistory where mydayid = p_mydayid and statusid = 9 ) THEN v_validationcheck := false; ELSE v_validationcheck := true; END IF; select string_agg( displayname || '-' || hq.headquarter, ',' ) into v_sharingwith from tbluserlogin as ul left join tblheadquarter as hq on hq.headquarterid = ul.headquarterid where ul.userid in ( select regexp_split_to_table(sharingwith, ','):: integer from tblaccommodationexpense as aex inner join tblexpense as ex on ex.expenseid = aex.expenseid where ex.mydayid = v_mydayid and sharingwith != '' ); SELECT row_to_json(kk) INTO v_ResultData1 FROM ( select ex.mydayid, hb.checkindate, hb.checkoutdate, hb.newbilldate, hb.billno, hb.roomno, hb.hotelgstno, hb.beforegst, CASE WHEN(hb.isgsthotel = true) THEN hb.sgst ELSE 0 END as sgst, CASE WHEN(hb.isgsthotel = true) THEN hb.cgst ELSE 0 END as cgst, CASE WHEN( COALESCE( aex.billsubmitexpenseid, aex.expenseid ) = aex.expenseid ) THEN hb.claimamount else 0 end as claimamount, hb.isgsthotel, CASE WHEN(hb.isgsthotel = true) THEN hm.hotelname ELSE hb.hotelname END as hotelname , CASE WHEN( hb.isgsthotel = true and hb.cityid = 1 ) THEN coalesce(hb.city, hm.city) WHEN( hb.isgsthotel = false and hb.cityid = 1 ) THEN coalesce(hb.city, '') ELSE coalesce(city.city, '') END as city , hb.discount as discount, hba.filename as hotelbillattachment, hb.cityid, hb.claimlimit, hm.isnewhotel from tblexpense as ex inner join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid left join tblexpense as ex1 on ex1.expenseid = aex.billsubmitexpenseid left join tblaccommodationexpense as aex1 on aex1.expenseid = ex1.expenseid left join tblhotelbill as hb on hb.accommodationexpenseid = COALESCE( aex1.accommodationexpenseid, aex.accommodationexpenseid ) left join tblcitycategory as city on city.citycategoryid = hb.cityid left join ( select hotelbillid, string_agg(filename, ',') as filename from tblhotelbillattachment group by hotelbillid ) as hba on hba.hotelbillid = hb.hotelbillid left join tblhotelmaster as hm on hm.hotelgstno = hb.hotelgstno where ex.mydayid = p_mydayid ) as kk; select string_agg(distinct travelingmode, ',') into v_travelingmode from tblmydaytravelingmode where mydayid = p_mydayid; select count(1) into v_customercount from tblcustomervisit where mydayid = p_mydayid; select count(1) into v_retailercount from tblretailervisit where mydayid = p_mydayid; select count(1) into v_ifmcount from tblfarmervisit where mydayid = p_mydayid; select count(1) into v_reviewmeetingcount from tbllreviewmeetingvisit where mydayid = p_mydayid; select count(1) into v_ofmcount from tblfarmermeetingvisit where mydayid = p_mydayid; select count(1) into v_democount from tbldemovisit where mydayid = p_mydayid; select count(1) into v_followupcount from tblfollowupvisit where mydayid = p_mydayid; select count(1) into v_fielddaycount from tblfielddayvisit where mydayid = p_mydayid; select count(1) into v_othercount from tbllothervisit where mydayid = p_mydayid; select count(1) into v_stockcount from tblstockvisit where mydayid = p_mydayid; select COALESCE(customer, 0), COALESCE(retailer, 0), COALESCE(ifm, 0), COALESCE(ofm, 0), COALESCE(reviewmeeting, 0), COALESCE(demo, 0), COALESCE(followupday, 0), COALESCE(fieldday, 0), COALESCE(others, 0), COALESCE(total, 0) into v_validationcustomer, v_validationretailer, v_validationifm, v_validationofm, v_validationreviewmeeting, v_validationdemo, v_validationfollowupday, v_validationfieldday, v_validationothers, v_validationtotal from tblvisitvalidationmaster where subusertypeid = v_subusertypeid and ( p_journeydate between fromdate and todate ) and salesdistrictid in ( select regexp_split_to_table(v_subregionid, ','):: integer ) limit 1; SELECT array_to_json( array_agg(kk) ) INTO v_travelingmodejson FROM ( select travelingmode, openingkm, closingkm, 'ODO Meter Attachment/' || openingpicture as openingpicture, 'ODO Meter Attachment/' || closingpicture as closingpicture from tblmydaytravelingmode where mydayid = p_mydayid order by mydaytravelingmodeid asc ) as kk; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select md.mydayid, md.createdby as visiterid, md.starttime :: date as journeydate, TRUNC( COALESCE(ex.totalamount, 0) ) as totalamount, TRUNC( COALESCE( ex.approvedamount, ex.totalamount ) ) as approvedamount, true as isclaimvalidate , ex.expenseid, tex.travelingexpenseid, COALESCE(tex.fuelprice2w, 0) as fuelprice2w, COALESCE(tex.maintenanceprice2w, 0) as maintenanceprice2w, TRUNC( COALESCE(tex.geokm2w, 0) ) as geokm2w, COALESCE(tex.openkm2w, 'Open Kms :0.00') as openkm2w, COALESCE( tex.closekm2w, 'Close Kms :0.00' ) as closekm2w, TRUNC( COALESCE(tex.ocdiff2w, 0) ) as ocdiff2w, TRUNC( COALESCE(tex.actualkm2w, 0) ) as actualkm2w, COALESCE(tex.fuelprice4w, 0) as fuelprice4w, COALESCE(tex.maintenanceprice4w, 0) as maintenanceprice4w, TRUNC( COALESCE(tex.geokm4w, 0) ) as geokm4w, TRUNC( COALESCE(tex.ocdiff4w, 0) ) as ocdiff4w, COALESCE(tex.openkm4w, 'Open Kms :0.00') as openkm4w, COALESCE( tex.closekm4w, 'Close Kms :0.00' ) as closekm4w, TRUNC( COALESCE(tex.actualkm4w, 0) ) as actualkm4w, tex.travelfrom, tex.travelto, tex.bus, tex.train, tex.air, tex.auto, tex.cab, tex.other, tex.withother, ul.displayname as withothername, TRUNC( COALESCE(tex.totalamount, 0) ) as travelingtotalamount, TRUNC( COALESCE( tex.approvedamount, tex.totalamount, 0 ) ) as approvedtravelingamount, aex.accommodationexpenseid, aex.type, CASE WHEN(aex.type = '1') THEN 'Back to HQ' WHEN(aex.type = '2') THEN 'with friend-relatives' WHEN(aex.type = '3') THEN 'hotel-claimant' WHEN(aex.type = '4') THEN 'hotel-stay with colleague' WHEN(aex.type = '5') THEN 'Night Travelling' ELSE '' END as typename, CASE WHEN(aex.issharingstay = 1 :: bit) THEN true else false end as issharingstay, aex.sharingwith, aex.staywith, TRUNC( COALESCE(aex.totalamount, 0) ) as accommodationtotalamount, TRUNC( COALESCE( aex.approvedamount, aex.totalamount, 0 ) ) as approvedaccommodationamount, TRUNC( COALESCE(v_awithfriendrelative, 0) ) as awithfriendrelative, TRUNC( COALESCE(v_bwithfriendrelative, 0) ) as bwithfriendrelative, TRUNC( COALESCE(v_ndaamount, 0) ) as ndaamount, v_isreviewmeeting as isreviewmeeting, v_mtd as mtd, v_ytd as ytd, daex.daexpenseid, TRUNC( COALESCE(daex.totalamount, 0) ) as datotalamount, TRUNC( COALESCE( daex.approvedamount, daex.totalamount, 0 ) ) as approveddaamount, aex.cityid as cityid, aex.othercityname as othercityname, CASE WHEN(cc.city = 'Other') THEN aex.othercityname ELSE cc.city END as city, CASE WHEN(md.createdby != p_userid) THEN 'RSMView' WHEN(md.statusid = 4) THEN 'Insert' WHEN(md.statusid = 5) THEN 'Update' WHEN(md.statusid = 6) THEN 'Update' WHEN(md.statusid = 7) THEN 'RejectedUpdate' WHEN(md.statusid = 8) THEN 'View' WHEN(md.statusid = 9) THEN 'RejectedUpdate' WHEN(md.statusid = 10) THEN 'ViewDeduction' WHEN(md.statusid = 11) THEN 'View' WHEN(md.statusid = 13) THEN 'ViewDeduction' WHEN(md.statusid = 14) THEN 'View' WHEN(md.statusid = 15) THEN 'View' END as previewmode, cs.status, texd.filename as travelingdocument, v_ResultData1 as hotelbill, '<b>General Comment</b> :- ' || COALESCE(md.rejectreason, '')|| '<br/><b>Traveling Comment</b> :- ' || COALESCE(tex.comment, '')|| '<br/><b>Accommodation Comment</b> :- ' || COALESCE(aex.comment, '')|| '<br/><b>DA Comment</b> :- ' || COALESCE(daex.comment, '') as rejectreason, CASE WHEN(aex.type = '3') THEN v_sharingwith WHEN(aex.type = '4') THEN sw.displayname || ' - ' || COALESCE(hqsw.headquarter, '') ELSE '' END as sharingwithname , COALESCE(ex.totalamount, 0) - COALESCE( ex.approvedamount, ex.totalamount, 0 ) as totaldeduction, COALESCE(tex.totalamount, 0) - COALESCE( tex.approvedamount, tex.totalamount, 0 ) as deductiontravelingamount, COALESCE(aex.totalamount, 0) - COALESCE( aex.approvedamount, aex.totalamount, 0 ) as deductionaccommodationamount, COALESCE(daex.totalamount, 0) - COALESCE( daex.approvedamount, daex.totalamount, 0 ) as deductiondaamount, md.statusid, ull.displayname as name, ull.username as mobileno, ull.employeecode, vehicle.lookupvalue as vehicle, hq.headquarter, st.subusertype, grade.lookupvalue as grade, to_char(ull.createddate, 'dd/MM/yyyy') as createdsince, tex.comment as travelingcomment, aex.comment as accommodationcomment, daex.comment as dacomment, COALESCE(md.rejectreason, '') as generalcomment, v_travelingmode as travelingmode, CASE WHEN( aex.billsubmitexpenseid is not null and aex.expenseid != aex.billsubmitexpenseid ) then true else false end as ishotelbilldisabled, CASE WHEN(v_vehicletype = 'N/A') THEN true ELSE false END as isnovehicletype, md.expenseno, to_char( md.starttime, 'dd/MM/yyyy HH24:MI:SS' ) as daystart, to_char( md.endtime, 'dd/MM/yyyy HH24:MI:SS' ) as dayend, COALESCE(validflag, 0) as validflag , COALESCE(v_validationcheck, true) as validationcheck , COALESCE(v_customercount, 0) as v_customercount, COALESCE(v_validationcustomer, 0) as v_validationcustomer, COALESCE(v_retailercount, 0) as v_retailercount, COALESCE(v_validationretailer, 0) as v_validationretailer, COALESCE(v_ifmcount, 0) as v_ifmcount, COALESCE(v_validationifm, 0) as v_validationifm, COALESCE(v_reviewmeetingcount, 0) as v_reviewmeetingcount, COALESCE(v_validationreviewmeeting, 0) as v_validationreviewmeeting, COALESCE(v_ofmcount, 0) as v_ofmcount, COALESCE(v_validationofm, 0) as v_validationofm, COALESCE(v_democount, 0) as v_democount, COALESCE(v_validationdemo, 0) as v_validationdemo, COALESCE(v_followupcount, 0) as v_followupcount, COALESCE(v_validationfollowupday, 0) as v_validationfollowupday, COALESCE(v_fielddaycount, 0) as v_fielddaycount, COALESCE(v_validationfieldday, 0) as v_validationfieldday, COALESCE(v_othercount, 0) as v_othercount, COALESCE(v_validationothers, 0) as v_validationothers, ( COALESCE(v_customercount, 0)+ COALESCE(v_retailercount, 0)+ COALESCE(v_ifmcount, 0)+ COALESCE(v_reviewmeetingcount, 0)+ COALESCE(v_ofmcount, 0)+ COALESCE(v_democount, 0)+ COALESCE(v_followupcount, 0)+ COALESCE(v_fielddaycount, 0)+ COALESCE(v_othercount, 0) ) as v_totalcount, COALESCE(v_validationtotal, 0) as v_validationtotal , v_travelingmodejson as travelingmodejson from tblmyday as md inner join tbluserlogin as ull on ull.userid = md.createdby left join tblexpense as ex on ex.mydayid = md.mydayid left join tbltravelingexpense as tex on tex.expenseid = ex.expenseid left join ( select travelingexpenseid, string_agg(filename, ',') as filename from tbltravelingdocument group by travelingexpenseid ) as texd on texd.travelingexpenseid = tex.travelingexpenseid left join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid left join tbldaexpense as daex on daex.expenseid = ex.expenseid left join tblclaimstatus as cs on cs.claimstatusid = md.statusid left join tbluserlogin as ul on ul.userid = tex.withother left join tblcitycategory as cc on cc.citycategoryid = aex.cityid left join tbluserlogin as sw on sw.userid = aex.staywith left join tblheadquarter as shq on shq.headquarterid = sw.headquarterid left join tbllookupvalues as vehicle on vehicle.lookupvalueid = ull.vehicleid left join tblheadquarter as hq on hq.headquarterid = ull.headquarterid left join tblheadquarter as hqsw on hqsw.headquarterid = sw.headquarterid left join tblsubusertype as st on st.subusertypeid = ull.subusertypeid left join tbllookupvalues as grade on grade.lookupvalueid = ull.gradeid where md.mydayid = p_mydayid ) as kk; RETURN v_ResultData; elseif(p_mode = 13) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData1 FROM ( select id, userid, checkintime, checkouttime, to_char(totaltime, 'HH24:MI:SS') as totaltime, totaltimemin, name, type, checkindatetime :: date as checkindate from ( select cv.customervisitplanid as id, md.createdby as userid, to_char(cv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( cv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(cv.checkouttime, cv.checkintime) as totaltime, CASE WHEN( cv.checkintime is not null and cv.checkouttime is not null ) THEN DATEDIFF( 'minute', cv.checkintime :: timestamp, cv.checkouttime :: timestamp ) ELSE 0 END as totaltimemin, cm.customername || '(' || cm.customercode || ')' as name, 'customer' as type, cv.checkintime as checkindatetime from tblmyday as md inner join tblcustomervisit as cv on cv.mydayid = md.mydayid inner join tblcustomervisitplan as cvp on cvp.customervisitplanid = cv.customervisitplanid inner join tblcustomermaster as cm on cm.id = cvp.customerid where md.mydayid = p_mydayid union select rv.retailervisitplanid as id, md.createdby as userid, to_char(rv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( rv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(rv.checkouttime, rv.checkintime) as totaltime, CASE WHEN( rv.checkintime is not null and rv.checkouttime is not null ) THEN DATEDIFF( 'minute', rv.checkintime :: timestamp, rv.checkouttime :: timestamp ) ELSE 0 END as totaltimemin, re.name || '(' || re.city || ')' as name, 'retailer' as type, rv.checkintime as checkindatetime from tblmyday as md inner join tblretailervisit as rv on rv.mydayid = md.mydayid inner join tblretailervisitplan as rvp on rvp.retailervisitplanid = rv.retailervisitplanid inner join tblretailer as re on re.retailerid = rvp.retailerid where md.mydayid = p_mydayid union select rmvp.reviewmeetingvisitplanid as id, md.createdby as userid, to_char( rmv.checkintime, 'HH12:MI:SS AM' ) as checkintime, to_char( rmv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age( rmv.checkouttime, rmv.checkintime ) as totaltime, 0 as totaltimemin, rmvp.rmno as name, 'reviewmeeting' as type, rmv.checkintime as checkindatetime from tblmyday as md inner join tbllreviewmeetingvisit as rmv on rmv.mydayid = md.mydayid inner join tblreviewmeetingvisiter as rmvi on rmvi.reviewmeetingvisiterid = rmv.reviewmeetingvisiterid inner join tblreviewmeetingvisitplan as rmvp on rmvp.reviewmeetingvisitplanid = rmvi.reviewmeetingvisitplanid where md.mydayid = p_mydayid union select fvp.farmervisitplanid as id, md.createdby as userid, to_char(fv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( fv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(fv.checkouttime, fv.checkintime) as totaltime, 0 as totaltimemin, f.name || '(' || f.city || ')' as name, 'ifm' as type, fv.checkintime as checkindatetime from tblmyday as md inner join tblfarmervisit as fv on fv.mydayid = md.mydayid inner join tblfarmervisitplan as fvp on fvp.farmervisitplanid = fv.farmervisitplanid inner join tblfarmer as f on f.farmerid = fvp.farmerid where md.mydayid = p_mydayid union select fmvp.farmermeetingvisitplanid as id, md.createdby as userid, to_char(fv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( fv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(fv.checkouttime, fv.checkintime) as totaltime, 0 as totaltimemin, fmvp.ofmno as name, 'ofm' as type, fv.checkintime as checkindatetime from tblmyday as md inner join tblfarmermeetingvisit as fv on fv.mydayid = md.mydayid inner join tblfarmermeetingvisiter as fmvi on fmvi.farmermeetingvisiterid = fv.farmermeetingvisiterid inner join tblfarmermeetingvisitplan as fmvp on fmvp.farmermeetingvisitplanid = fmvi.farmermeetingvisitplanid where md.mydayid = p_mydayid union select dmvp.demovisitplanid as id, md.createdby as userid, to_char(dv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( dv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(dv.checkouttime, dv.checkintime) as totaltime, 0 as totaltimemin, dmvp.demono as name, 'demo' as type, dv.checkintime as checkindatetime from tblmyday as md inner join tbldemovisit as dv on dv.mydayid = md.mydayid inner join tbldemovisiter as dvi on dvi.demovisiterid = dv.demovisiterid inner join tbldemovisitplan as dmvp on dmvp.demovisitplanid = dvi.demovisitplanid where md.mydayid = p_mydayid union select fuvp.demovisitplanid as id, md.createdby as userid, to_char( fuv.checkintime, 'HH12:MI:SS AM' ) as checkintime, to_char( fuv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age( fuv.checkouttime, fuv.checkintime ) as totaltime, 0 as totaltimemin, dmvp.demono as name, 'followup' as type, fuv.checkintime as checkindatetime from tblmyday as md inner join tblfollowupvisit as fuv on fuv.mydayid = md.mydayid inner join tbldemovisiter as dvi on dvi.demovisiterid = fuv.demovisiterid inner join tblfollowupvisitplan as fuvp on fuvp.demovisitplanid = dvi.demovisitplanid inner join tbldemovisitplan as dmvp on dmvp.demovisitplanid = dvi.demovisitplanid where md.mydayid = p_mydayid union select fdvp.demovisitplanid as id, md.createdby as userid, to_char( fdv.checkintime, 'HH12:MI:SS AM' ) as checkintime, to_char( fdv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age( fdv.checkouttime, fdv.checkintime ) as totaltime, 0 as totaltimemin, dmvp.demono as name, 'fieldday' as type, fdv.checkintime as checkindatetime from tblmyday as md inner join tblfielddayvisit as fdv on fdv.mydayid = md.mydayid inner join tbldemovisiter as dvi on dvi.demovisiterid = fdv.demovisiterid inner join tblfielddayvisitplan as fdvp on fdvp.demovisitplanid = dvi.demovisitplanid inner join tbldemovisitplan as dmvp on dmvp.demovisitplanid = dvi.demovisitplanid where md.mydayid = p_mydayid union select ot.othervisitplanid as id, md.createdby as userid, to_char(ot.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( ot.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(ot.checkouttime, ot.checkintime) as totaltime, 0 as totaltimemin, vt.lookupvalue as name, 'other' as type, ot.checkintime as checkindatetime from tblmyday as md inner join tbllothervisit as ot on ot.mydayid = md.mydayid inner join tblothervisitplan as ovp on ovp.othervisitplanid = ot.othervisitplanid inner join tbllookupvalues as vt on vt.lookupvalueid = ovp.visittypeid where md.mydayid = p_mydayid union select svp.stockvisitplanid as id, md.createdby as userid, to_char(sv.checkintime, 'HH12:MI:SS AM') as checkintime, to_char( sv.checkouttime, 'HH12:MI:SS AM' ) as checkouttime, age(sv.checkouttime, sv.checkintime) as totaltime, 0 as totaltimemin, COALESCE(cm.customername, r.name) as name, 'stock' as type, sv.checkintime as checkindatetime from tblmyday as md inner join tblstockvisit as sv on sv.mydayid = md.mydayid inner join tblstockvisitplan as svp on svp.stockvisitplanid = sv.stockvisitplanid left join tblcustomermaster as cm on cm.id = svp.customerid left join tblretailer as r on r.retailerid = svp.retailerid where md.mydayid = p_mydayid ) as t order by t.checkindatetime asc ) as kk; v_ischeckvehiclevalid := true; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select date, startdate, enddate, starttime, endtime, modeoftravel, ( select count(1) from tblcustomervisit where mydayid = p_mydayid ) as customer, ( select count(1) from tblretailervisit where mydayid = p_mydayid ) as retailer, ( select count(1) from tblfarmervisit where mydayid = p_mydayid ) as ifm, ( select count(1) from tbllreviewmeetingvisit where mydayid = p_mydayid ) as reviewmeeting, ( select count(1) from tblfarmermeetingvisit where mydayid = p_mydayid ) as ofm, ( select count(1) from tbldemovisit where mydayid = p_mydayid ) as demo, ( select count(1) from tblfollowupvisit where mydayid = p_mydayid ) as followup, ( select count(1) from tblfielddayvisit where mydayid = p_mydayid ) as fieldday, ( select count(1) from tbllothervisit where mydayid = p_mydayid ) as other, ( select count(1) from tblstockvisit where mydayid = p_mydayid ) as stock, v_ResultData1 as planvisitlist, vehicle, v_ischeckvehiclevalid as ischeckvehiclevalid from ( select myday.starttime :: date as date, myday.starttime :: date as startdate, myday.endtime :: date as enddate, COALESCE( to_char(myday.starttime, 'HH12:MI AM'), '' ) as starttime, COALESCE( to_char(myday.endtime, 'HH12:MI AM'), '' ) as endtime, string_agg(mdtm.travelingmode, ', ') over(partition by myday.mydayid) as modeoftravel, row_number() over(partition by myday.mydayid) as no, lv.lookupvalue as vehicle from tblmyday as myday inner join tblmydaytravelingmode as mdtm on mdtm.mydayid = myday.mydayid inner join tbluserlogin as ul on ul.userid = myday.createdby left join tbllookupvalues as lv on lv.lookupvalueid = ul.vehicleid where myday.mydayid = p_mydayid ) as t where t.no = 1 ) as kk; RETURN v_ResultData; elseif(p_mode = 14) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select cd.status, ul.displayname, to_char( mdsh.statuschangedate, 'dd/MM/yyyy HH12:MI:SS AM' ) as statuschangedate, mdsh.comment, to_char( md.starttime, 'dd/MM/yyyy HH12:MI:SS AM' ) as starttime , to_char( md.endtime, 'dd/MM/yyyy HH12:MI:SS AM' ) as endtime , to_char(ex.createddate, 'dd/MM/yyyy') as expensedate from tblmydaystatushistory as mdsh inner join tblmyday as md on md.mydayid = mdsh.mydayid inner join tblexpense as ex on ex.mydayid = md.mydayid inner join tblclaimstatus as cd on cd.claimstatusid = mdsh.statusid inner join tbluserlogin as ul on ul.userid = mdsh.statuschangedby where mdsh.mydayid = p_mydayid order by mdsh.mydaystatushistoryid asc ) as kk; RETURN v_ResultData; elseif(p_mode = 15) THEN select md.createdby into p_userid from tblmyday as md where md.mydayid = p_mydayid; v_startdate := p_checkindate; v_enddate := ( CASE WHEN(p_checkindate = p_checkoutdate) THEN p_checkoutdate ELSE p_checkoutdate :: date - 1 END ); WHILE v_startdate <= v_enddate LOOP select CASE WHEN( aex.sharingwith is not null and aex.sharingwith != '' ) THEN aex.sharingwith || ',' || md.createdby :: text ELSE md.createdby :: text END sharingwith, md.mydayid into v_sharingwith, v_mydayid from tblmyday as md left join tblexpense as ex on ex.mydayid = md.mydayid left join tblaccommodationexpense as aex on aex.expenseid = ex.expenseid where md.starttime :: date = v_startdate and md.createdby = p_userid; v_totalclaimlimit := v_totalclaimlimit + ( select sum(hotelallowance) from regexp_split_to_table( CASE WHEN(p_mydayid = v_mydayid) THEN CASE WHEN( p_sharingwith is null or p_sharingwith = '' ) THEN v_sharingwith ELSE p_sharingwith END ELSE v_sharingwith END, ',' ) as u inner join tbluserlogin as ul on u :: integer = ul.userid inner join tblhotelallowance as ha on ha.subusertypeid = ul.subusertypeid and ha.staytype = 'Hotel – claimant' inner join tbllookupvalues as lv on lv.lookupvalueid = ha.categoryid inner join tblcitycategory as cc on cc.category = lv.lookupvalue where cc.citycategoryid = p_cityid and v_startdate :: date between ha.fromdate and ha.todate ); v_startdate := v_startdate + 1; END LOOP; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select v_totalclaimlimit as hotelallowance ) as kk; RETURN v_ResultData; elseif(p_mode = 16) THEN SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select cm.customercode, cm.customername, cv.checkintime, cv.checkouttime from tblcustomervisit as cv inner join tblmyday as md on md.mydayid = cv.mydayid inner join tblcustomervisitplan as cvp on cvp.customervisitplanid = cv.customervisitplanid inner join tblcustomermaster as cm on cm.id = cvp.customerid where md.mydayid = p_mydayid ) as kk; RETURN v_ResultData; elseif(p_mode = 17) then select subusertypeid into v_subusertypeid from tbluserlogin where userid = p_userid; select zoneidlist, salesdistrictidlist into v_zonlist, v_subregionlist from vwzonesubregionsalesdistrict where userid = p_userid; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select sdm.name as subregion, sut.subusertype as subusertype, vvm.meetingtime, COALESCE(vvm.customer, 0) as customer, COALESCE(vvm.retailer, 0) as retailer, COALESCE(vvm.ifm, 0) as ifm, COALESCE(vvm.ofm, 0) as ofm, COALESCE(vvm.reviewmeeting, 0) as reviewmeeting, COALESCE(vvm.demo, 0) as demo, COALESCE(vvm.followupday, 0) as followupday, COALESCE(vvm.fieldday, 0) as fieldday, COALESCE(vvm.others, 0) as others, COALESCE(vvm.total, 0) as total, COALESCE(retailermeetingtime, 0) as retailermeetingtime, CASE WHEN( COALESCE(daystarttime, '00:00:00' :: time) = '00:00:00' :: time ) THEN '00:00:00' :: text ELSE to_char( COALESCE(daystarttime, '00:00:00' :: time), 'HH12:mi AM' ) END as daystarttime, CASE WHEN( COALESCE(dayendtime, '00:00:00' :: time) = '00:00:00' :: time ) THEN '00:00:00' :: text ELSE to_char( COALESCE(dayendtime, '00:00:00' :: time), 'HH12:mi AM' ) END as dayendtime, CASE WHEN( COALESCE( firstcheckintime, '00:00:00' :: time ) = '00:00:00' :: time ) THEN '00:00:00' :: text ELSE to_char( COALESCE( firstcheckintime, '00:00:00' :: time ), 'HH12:mi AM' ) END as firstcheckintime from tblvisitvalidationmaster as vvm inner join vwzonesubregionsalesdistrict vwzssd on vwzssd.userid = p_userid left join tblsalesdistrictmaster as sdm on sdm.id = vvm.salesdistrictid left join tblsubusertype as sut on sut.subusertypeid = vvm.subusertypeid where vvm.subusertypeid = v_subusertypeid and ( p_claimdate between vvm.fromdate and vvm.todate ) and sdm.id in ( select regexp_split_to_table(v_subregionlist, ','):: integer ) limit 1 ) as kk; RETURN v_ResultData; elseif(p_mode = 18) then select mydayid into p_mydayid from tblmyday where uuid = p_mydayuuid; IF EXISTS( select 1 from tblmyday where uuid = p_mydayuuid and trim( to_char(starttime :: date, 'Day') ) = 'Thursday' ) THEN select count(1) into v_retailercount from tblretailer where customerid in ( select customerid from getcustomerrights(p_userid) ); select count(1) into v_customercount from getcustomerrights(p_userid); select count(1) into v_visitcount from tblstockvisitplan as svp inner join tblstockvisit as sv on sv.stockvisitplanid = svp.stockvisitplanid where sv.mydayid = p_mydayid; v_visitpercentage := CASE WHEN( ( v_retailercount + v_customercount ) > 0 ) THEN (100 * v_visitcount)/( v_retailercount + v_customercount ) ELSE 0 END; SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select CASE WHEN(v_visitpercentage >= 0) THEN false ELSE true END as iserror, 'You have not completed required Liquidation data capture. Still do you want to ‘Day End”?' as errormessage ) as kk; RETURN v_ResultData; ELSE SELECT array_to_json( array_agg(kk) ) INTO v_ResultData FROM ( select false as iserror, '' as errormessage ) as kk; RETURN v_ResultData; END IF; END IF; END; 
$BODY$;

ALTER FUNCTION public.usp_mydaycrud(integer, integer, integer, uuid, numeric, date, json, json, json, json, json, character varying, integer, date, date, date, character varying, integer, integer)
    OWNER TO postgres;
fgh  
